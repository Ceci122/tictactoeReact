{"version":3,"sources":["App.js","index.js"],"names":["Square","_ref","value","onSquareClick","React","createElement","className","onClick","Board","_ref2","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","Fragment","Game","history","setHistory","useState","Array","fill","currentMove","setCurrentMove","currentSquares","moves","map","move","description","key","nextHistory","length","lines","a","b","c","ReactDOM","createRoot","document","getElementById","render","App"],"mappings":"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","file":"static/js/main.52fb3e72.chunk.js","sourcesContent":["import React from 'react';\r\n/* React App Tic Tac Toe Game that lets you play against yourself. \r\nIt uses React hooks to manage state and handle user interactions. \r\nThe game board is a 3x3 grid, and players take turns placing their \r\nmarks (X or O) in the squares. The game checks for a winner after \r\neach move and allows players to jump back to previous moves.\r\n*/\r\nimport { useState } from \"react\";\r\n\r\nfunction Square({ value, onSquareClick }) {\r\n  return (\r\n    <button className=\"square\" onClick={onSquareClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board({ xIsNext, squares, onPlay }) {\r\n  function handleClick(i) {\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    const nextSquares = squares.slice();\r\n    if (xIsNext) {\r\n      nextSquares[i] = \"X\";\r\n    } else {\r\n      nextSquares[i] = \"O\";\r\n    }\r\n    onPlay(nextSquares);\r\n  }\r\n\r\n  const winner = calculateWinner(squares);\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function Game() {\r\n  const [history, setHistory] = useState([Array(9).fill(null)]);\r\n  const [currentMove, setCurrentMove] = useState(0);\r\n  const xIsNext = currentMove % 2 === 0;\r\n  const currentSquares = history[currentMove];\r\n\r\n  function handlePlay(nextSquares) {\r\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\r\n    setHistory(nextHistory);\r\n    setCurrentMove(nextHistory.length - 1);\r\n  }\r\n\r\n  function jumpTo(nextMove) {\r\n    setCurrentMove(nextMove);\r\n  }\r\n\r\n  const moves = history.map((squares, move) => {\r\n    let description;\r\n    if (move > 0) {\r\n      description = \"Go to move #\" + move;\r\n    } else {\r\n      description = \"Go to game start\";\r\n    }\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{description}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './style.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <>\r\n    <header>Tic Tac Toe Game</header>\r\n    <App />\r\n  </>\r\n);\r\n"],"sourceRoot":""}